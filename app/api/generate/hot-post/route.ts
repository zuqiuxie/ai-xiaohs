export const runtime = 'edge'

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY
const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions'

export async function POST(req: Request) {
  if (!DEEPSEEK_API_KEY) {
    return new Response(
      JSON.stringify({ error: 'API key is not configured' }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }

  try {
    const { originalText, title, keywords, style, additionalInfo } = await req.json()

    // if (!originalText || !title || !keywords) {
    //   return new Response(
    //     JSON.stringify({ error: 'Missing required parameters' }),
    //     {
    //       status: 400,
    //       headers: { 'Content-Type': 'application/json' }
    //     }
    //   )
    // }

    // ‰øùÊåÅÂéüÊúâÁöÑÊ∂àÊÅØÁªìÊûÑ
    const messages = [
      {
        role: 'system',
        content: `‰Ω†ÊòØ‰∏Ä‰ΩçÊìÖÈïøÊ®°‰ªøÂíåÂàõÊñ∞ÁöÑÂ∞èÁ∫¢‰π¶ÂÜÖÂÆπÂàõ‰Ωú‰∏ìÂÆ∂„ÄÇ‰Ω†ÁöÑ‰ªªÂä°ÊòØÂü∫‰∫éÁî®Êà∑Êèê‰æõÁöÑÁàÜÊ¨æÁ¨îËÆ∞ÔºåÁªìÂêàÁî®Êà∑ÊåáÂÆöÁöÑ‰∏ªÈ¢òÂíåÈ£éÊ†ºÔºåÂàõ‰Ωú‰∏ÄÁØáÂÖ®Êñ∞ÁöÑÁ¨îËÆ∞„ÄÇÊÄªÂ≠óÊï∞‰∏•Ê†ºÊéßÂà∂Âú®300Â≠ó‰ª•ÂÜÖ„ÄÇ

Âàõ‰ΩúÂéüÂàôÔºö
- ‰øùÁïôÁàÜÊ¨æÁ¨îËÆ∞ÁöÑÊ†∏ÂøÉÂê∏ÂºïÂäõË¶ÅÁ¥†ÂíåÂÜô‰ΩúÊäÄÂ∑ß
- ÂÆåÂÖ®Âõ¥ÁªïÊñ∞‰∏ªÈ¢òÂ±ïÂºÄÔºåÈÅøÂÖçÂ§çÂà∂ÂéüÂÜÖÂÆπ
- ËûçÂÖ•Áî®Êà∑Êèê‰æõÁöÑÂÖ≥ÈîÆËØçÂíåÈ£éÊ†ºÁâπÁÇπÂíåË°•ÂÖÖ‰ø°ÊÅØ
- Á°Æ‰øùÂÜÖÂÆπÂéüÂàõÊÄßÂíåÁúüÂÆûÊÑü

Âàõ‰ΩúËßÑËåÉÔºö
1. Ê†áÈ¢òÔºà20Â≠óÂÜÖÔºâÔºö
   - ÂøÖÈ°ª‰ΩìÁé∞Áî®Êà∑ÁöÑ‰∏ªÈ¢òÂíåÂÖ≥ÈîÆËØç
   - 1-2‰∏™emojiÔºåÊîæÂú®ÂºÄÂ§¥ÊàñÁªìÂ∞æ
   - ËøêÁî®‰ª•‰∏ãÊ†áÈ¢òÊäÄÂ∑ßÔºö
     * ËÆæÊÇ¨ÂøµÔºö"ÂÅ∂ÁÑ∂ÂèëÁé∞..."
     * Âº∫Ë∞É‰ª∑ÂÄºÔºö"‰∏ÄÊãõËß£ÂÜ≥..."
     * ÂàÜ‰∫´‰ΩìÈ™åÔºö"Â≠¶‰ºöËøôÊãõ..."
     * ÊÉÖÊÑüÂÖ±È∏£Ôºö"ÂÜç‰πü‰∏çÊÄï..."

2. Ê≠£ÊñáÁªìÊûÑÔºö
   - ÂºÄÁØáÔºà40Â≠óÂÜÖÔºâÔºöÂø´ÈÄüÁÇπÈ¢òÔºåÂª∫Á´ãÂÖ±È∏£
   - Ê†∏ÂøÉÂÜÖÂÆπÔºà120Â≠óÂÜÖÔºâÔºö
     * 2-3‰∏™ÈáçÁÇπÔºåÊØèÊÆµÁî®Ê∏©Âíåemoji(üîçüí°‚ú®üìåüí´üåüüíéüéØ‚≠êÔ∏èüîÜ)ÂºÄÂ§¥
     * ÊØè‰∏™ÈáçÁÇπÂøÖÈ°ª‰ΩìÁé∞Áî®Êà∑ÁöÑÂÖ≥ÈîÆËØç
     * ÊåâÁî®Êà∑ÊåáÂÆöÁöÑÈ£éÊ†ºÂ±ïÂºÄ
   - ÁªìÂ∞æÔºà20Â≠óÂÜÖÔºâÔºöÊÄªÁªìÊàñ‰∫íÂä®ÂºïÂØº

Ë°®ËææË¶ÅÊ±ÇÔºö
- Ê®°‰ªøÁàÜÊ¨æÁ¨îËÆ∞ÁöÑËäÇÂ•èÂíåËØ≠Ê∞î
- ËûçÂÖ•Áî®Êà∑ÊåáÂÆöÁöÑÂÜô‰ΩúÈ£éÊ†º
- Á™ÅÂá∫Áî®Êà∑Êèê‰æõÁöÑÂÖ≥ÈîÆËØç
- ‰øùÊåÅË°®ËææËá™ÁÑ∂ÁúüËØö
- ÂÜÖÂÆπÂä°ÂøÖÁÆÄÊ¥ÅÁ≤æÁÇº
- Á°Æ‰øùÂèØËØªÊÄßÂíåÂÆûÁî®ÊÄß`,
      },
      {
        role: 'user',
        content: `ÂèÇËÄÉÁ¥†ÊùêÔºö
ÁàÜÊ¨æÁ¨îËÆ∞Ôºö${originalText}

Âàõ‰ΩúË¶ÅÊ±ÇÔºö
‰∏ªÈ¢òÔºö${title}
ÂÖ≥ÈîÆËØçÔºö${keywords}
ÂÜô‰ΩúÈ£éÊ†ºÔºö${style}
${additionalInfo ? `Ë°•ÂÖÖ‰ø°ÊÅØÔºö${additionalInfo}` : ''}

Ê≥®ÊÑè‰∫ãÈ°πÔºö
1. Áõ¥Êé•ËæìÂá∫ÂÜÖÂÆπÔºå‰∏çË¶ÅÂåÖÂê´‰ªª‰ΩïÊ†áËÆ∞ÊñáÂ≠ó
2. Á™ÅÂá∫Ê†∏ÂøÉÂÖ≥ÈîÆËØç
3. ÂÜÖÂÆπÁ≤æÁÇºÊúâ‰ª∑ÂÄº
5. ÊÄªÂ≠óÊï∞Èôê300Â≠óÂÜÖ`,
      },
    ]

    const response = await fetch(DEEPSEEK_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages,
        temperature: 0.75,
        max_tokens: 3000,
        stream: true,
        presence_penalty: 0.4,
        frequency_penalty: 0.4,
        top_p: 0.9,
      }),
    })

    if (!response.ok) {
      throw new Error(`Deepseek API error: ${response.status}`)
    }

    const transformStream = new TransformStream({
      start(controller) {
        (this as any).buffer = '';
        (this as any).processLine = (line: string) => {
          if (line.trim() === '') return;
          if (line.startsWith('data: ')) {
            const data = line.slice(5).trim();
            if (data === '[DONE]') {
              controller.enqueue(`data: ${JSON.stringify({ done: true })}\n\n`);
              return;
            }

            try {
              const parsed = JSON.parse(data);
              const content = parsed.choices?.[0]?.delta?.content || '';
              if (content) {
                controller.enqueue(`data: ${JSON.stringify({
                  content,
                  done: false,
                  isPartial: true
                })}\n\n`);
              }
            } catch (e) {
              console.error('Parse error:', e, 'Line:', line);
            }
          }
        };
      },

      transform(chunk, controller) {
        try {
          // console.log('[Edge] Processing chunk:', new Date().toISOString(), 'Size:', chunk.length);
          const text = new TextDecoder().decode(chunk);
          // console.log('Raw chunk:', text);

          (this as any).buffer += text;
          const lines = (this as any).buffer.split('\n');
          (this as any).buffer = lines.pop() || '';

          for (const line of lines) {
            (this as any).processLine(line);
          }
        } catch (error) {
          console.error('[Edge] Transform error:', error, new Date().toISOString());
        }
      },

      flush(controller) {
        if ((this as any).buffer) {
          (this as any).processLine((this as any).buffer);
        }
      }
    });

    const stream = response.body
      ?.pipeThrough(transformStream)
      ?.pipeThrough(new TextEncoderStream());

    if (!stream) {
      throw new Error('Failed to create stream');
    }

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache, no-transform',
        'Connection': 'keep-alive',
        'X-Accel-Buffering': 'no',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      },
    });

  } catch (error) {
    console.error('Generation error:', error)
    return new Response(
      JSON.stringify({
        error: 'ÁîüÊàêÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
        details: error instanceof Error ? error.message : 'Unknown error'
      }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }
}
